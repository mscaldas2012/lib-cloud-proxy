plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.20"
    id "org.jetbrains.kotlin.kapt" version "1.4.20"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.4.20"
//    id "groovy"
    id 'jacoco'
}

version "1.0.0-SNAPSHOT"
group "gov.cdc.ncezid"

apply plugin: 'maven'
apply plugin: 'idea'

repositories {
    maven {
        url "https://nexus.devaimsplatform.com/repository/maven-public/"
        credentials {
            username project.repoUser
            password project.repoPassword
        }
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation platform('software.amazon.awssdk:bom:2.15.35')
//    implementation 'software.amazon.awssdk:s3'

    implementation("io.micronaut.aws:micronaut-aws-sdk-v2")
    implementation "software.amazon.awssdk:s3"
    implementation "software.amazon.awssdk:sqs"
    implementation "software.amazon.awssdk:sts"

    implementation 'com.azure:azure-storage-blob:12.7.0'

    kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kapt("io.micronaut:micronaut-inject-java")
    kapt("io.micronaut:micronaut-validation")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    runtimeOnly("ch.qos.logback:logback-classic:1.2.3")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    kaptTest(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    kaptTest("io.micronaut:micronaut-inject-java")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
//    testImplementation("io.micronaut.test:micronaut-test-spock")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    // https://mvnrepository.com/artifact/org.spockframework/spock-core
//    testCompile group: 'org.spockframework', name: 'spock-core', version: '2.0-M4-groovy-3.0'
//    compile "io.micronaut:micronaut-runtime-groovy"
//    compileOnly "io.micronaut:micronaut-inject-groovy"
    testImplementation("io.micronaut.test:micronaut-test-junit5:{junitVersion}")
//    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:{junitVersion}")
}

test.classpath += configurations.developmentOnly

// use JUnit 5 platform
test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        csv.enabled false
        //html.destination file("${buildDir}/jacocoHtml")
        html.enabled true
    }
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
}

allOpen {
    annotation("io.micronaut.aop.Around")
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}
kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "lib.cloud.proxy.*")
        arg("micronaut.processing.group", "lib.cloud.proxy")
        arg("micronaut.processing.module", "libCloudProxy")
    }
}

//shadowJar {
//    mergeServiceFiles()
//}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart':'true',
                'micronaut.io.watch.enabled':'true',
                "micronaut.io.watch.paths":"src/main"
        )
    }
}


apply plugin: 'maven-publish'

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "https://nexus.devaimsplatform.com/repository/amp3-releases/"
            def snapshotsRepoUrl = "https://nexus.devaimsplatform.com/repository/amp3-snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username project.repoUser
                password project.repoPassword
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact(kotlinSourcesJar)

        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

